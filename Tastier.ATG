COMPILER Tastier

   const int // object kinds
      var = 0, proc = 1, cons = 3;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   public SymbolTable tab;
   public CodeGenerator gen;

/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.	//Carriage return
  lf  = '\n'.	//Line feed
  tab = '\t'.	//Tab
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)
  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)
   ]                     (. gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
        out int type>    (. int n; Obj obj; string name; int dims = 0; int colReg = 7, indexReg = 8; .)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                         .)
  ( Ident<out name>
  [ '['
    Expr<out reg,
         out type>       (. dims = 1;
                            if (type == integer) {
                              gen.MoveRegister(colReg, reg); // R7 holds column.
                            }
                            else SemErr("Integer type expected");
                         .)
    [ ','
      Expr<out reg,
           out type>       (. dims = 2;
                              if (type == integer) {
                                // index = row * no_cols + col
                                obj = tab.Find(name);
                                gen.LoadConstant(indexReg, obj.size1); // index = no_cols;
                                gen.MulOp(Op.MUL, indexReg, reg);      // index = index * row;
                                gen.AddOp(Op.ADD, indexReg, colReg);   // index = index + col;
                              }
                              else SemErr("Integer type expected");
                           .)
    ]
    ']'                  (.
                            if (dims == 1) {
                                gen.MoveRegister(indexReg, colReg);
                            }
                         .)
  ]
                         (.
                            obj = tab.Find(name); type = obj.type;
                            if (obj.kind == var) {
                                if (dims == 0) {
                                   if (obj.level == 0)
                                      gen.LoadGlobal(reg, obj.adr, name);
                                   else
                                      gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                                }
                                else { // if (dims == 1 || dims == 2)
                                    if (obj.level == 0)
                                       gen.LoadIndexedGlobal(reg, obj.adr, indexReg, name);
                                    else
                                       gen.LoadIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg, name);
                                }

                                if (type == boolean)
                                   gen.ResetZ(reg); // reset Z flag in CPSR
                            }
                            else if (obj.kind == cons) {
                                if (obj.type == integer) {
                                    type = integer;
                                    gen.LoadConstant(reg, obj.value);
                                }
                                else if (obj.type == boolean) {
                                    type = boolean;
                                    if (obj.value == 1) {
                                        gen.LoadTrue(reg);
                                    }
                                    else {
                                        gen.LoadFalse(reg);
                                    }
                                }
                            }
                            else SemErr("variable or constant expected");
                         .)

  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)

  | '-'
    Primary<out reg,
            out type>    (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)

  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)

  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)

  | '('
    Expr<out reg,
         out type>
    ')'
  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '(' ')'
  '{'
     { ConstDecl }
     { VarDecl }
     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name; Obj obj; int reg, colReg = 7, indexReg = 8; .)
= Ident<out name>        (. obj = tab.Find(name); .)
  [ '['
    Expr<out reg,
         out type>       (. int dims = 1;
                            if (type == integer) {
                              gen.MoveRegister(colReg, reg); // R7 holds column.
                            }
                            else SemErr("Integer type expected");
                         .)
    [ ','
      Expr<out reg,
           out type>       (. dims = 2;
                              if (type == integer) {
                                // index = row * no_cols + col
                                gen.LoadConstant(indexReg, obj.size1); // index = no_cols;
                                gen.MulOp(Op.MUL, indexReg, reg);      // index = index * row;
                                gen.AddOp(Op.ADD, indexReg, colReg);   // index = index + col;
                              }
                              else SemErr("Integer type expected");
                           .)
    ]
    ']'                  (.
                            if (dims == 1) {
                                gen.MoveRegister(indexReg, colReg);
                            }
                         .)
  ]
  ( ":="                 (.
                            if (obj.kind == proc)
                               SemErr("cannot assign to procedure");
                         .)
    Expr<out reg,
         out type>	        (.
                                if (type == obj.type) {
                                    if (obj.dims == 0) { // Scalar value.
                                        if (obj.level == 0)
                                            gen.StoreGlobal(reg, obj.adr, name);
                                        else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                                    }
                                    else {  // 1D / 2D array
                                        if (obj.level == 0)
                                            gen.StoreIndexedGlobal(reg, obj.adr, indexReg, name);
                                        else gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg, name);
                                    }
                                }
                                else SemErr("incompatible types");
                            .)

  [ "?"						(.	int l1, l2; l1 = 0;
									if (type == boolean) {
										l1 = gen.NewLabel();
										gen.BranchFalse(l1);
									}
									else SemErr("boolean type expected");
							.)
	Expr<out reg,
        out type>			(.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
	":"
	Expr<out reg,
        out type>		 (. gen.Label(l2); .)
  ]
	";"


  | '(' ')' ';'          (.
                            if (obj.kind == proc)
                               gen.Call(name);
                            else SemErr("object is not a procedure");
                         .)
  )

| "if"                   (. int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
      [ "else"
      Stat
      ]               	 (. gen.Label(l2); .)

| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)

| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger();
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break;
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, true);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'

| '{'                      (. tab.OpenSubScope(); .)
  { ConstDecl }
  { VarDecl }
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    { ConstDecl }
    { VarDecl }          // global variables
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

VarDecl                     (. Obj obj; string name; int type; int dims, size1, size2, start1, start2; .)
= Type<out type>
  Ident<out name>           (. obj = tab.NewObj(name, var, type); .)
  [
    ArrayDecl<out dims,
              out size1,
              out size2,
              out start1,
              out start2>   (. tab.CreateArray(obj, dims, size1, size2, start1, start2); .)
  ]
  { ','
    Ident<out name>         (. obj = tab.NewObj(name, var, type); .)
    [
      ArrayDecl<out dims,
                out size1,
                out size2,
                out start1,
                out start2> (. tab.CreateArray(obj, dims, size1, size2, start1, start2); .)
    ]
} ';'
.

/*-------------------------------------------------------------------------------------------*/

ConstDecl                (. string name; int type = undef, sign = 0, value = 0; Obj obj; .)
= "const"
  Ident<out name>
  '='
  (
    (                    (. sign = +1; .)
      [
        '-'              (. sign = -1; .)
      ]
      number             (. value = sign * Convert.ToInt32(t.val); .)
                         (. type = integer;  .)
    )
    |
    "true"               (. value = 1;      .)
                         (. type = boolean; .)
    |
    "false"              (. value = 0;      .)
                         (. type = boolean; .)
  )
                         (.
                            obj = tab.NewObj(name, cons, type);
                            obj.value = value;
                         .)
  ';'
.

/*-------------------------------------------------------------------------------------------*/

ArrayDecl<out int dims,
          out int size1,
          out int size2,
          out int start1,
          out int start2> (.  String name; int start = -1, end = -1; Obj obj; .)
= '['
  (
    number               (.  start = Convert.ToInt32(t.val);  .)
    |
    Ident<out name>      (.  obj = tab.Find(name);
                             if (obj.type == integer && obj.kind == cons)
                                start = obj.value;
                             else SemErr("Integer constant expected");
                         .)
  )
  ".."
  (
    number               (.  end = Convert.ToInt32(t.val);  .)
    |
    Ident<out name>      (.  obj = tab.Find(name);
                             if (obj.type == integer && obj.kind == cons)
                                end = obj.value;
                             else SemErr("Integer constant expected");
                         .)
  )

                         (. size1 = end - start + 1;  .)
                         (. size2 = 0;                .)
                         (. start1 = start;           .)
                         (. start2 = 0;               .)
                         (. dims = 1;                 .)
  [
    ','
    (
      number               (.  start = Convert.ToInt32(t.val);  .)
      |
      Ident<out name>      (.  obj = tab.Find(name);
                               if (obj.type == integer && obj.kind == cons)
                                  start = obj.value;
                               else SemErr("Integer constant expected");
                           .)
    )
    ".."
    (
      number               (.  end = Convert.ToInt32(t.val);  .)
      |
      Ident<out name>      (.  obj = tab.Find(name);
                               if (obj.type == integer && obj.kind == cons)
                                  end = obj.value;
                               else SemErr("Integer constant expected");
                           .)
    )

                           (. size2 = end - start + 1;  .)
                           (. start2 = start;           .)
                           (. dims = 2;                 .)
  ]
  ']'
.

END Tastier.
