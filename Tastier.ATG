COMPILER Tastier

    const int // object kinds
        var = 0, proc = 1, cons = 3;

    const int // types
        undef = 0, integer = 1, boolean = 2, new_type = 3, new_type_instance = 4;

    public SymbolTable tab;
    public CodeGenerator gen;

/*-------------------------------------------------------------------------------------------*/

CHARACTERS
    cr  = '\r'.	//Carriage return
    lf  = '\n'.	//Line feed
    tab = '\t'.	//Tab
    digit = "0123456789".
    letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
    stringCh = ANY - '"' - '\\' - cr - lf - tab.
    printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS
    number = digit { digit }.
    ident = letter { letter | digit }.
    string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                       (.  op = Op.ADD; .)
(
    '+'
    |
    '-'                 (.  op = Op.SUB; .)
)
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,       // load value of Expr into register
     out int type>      (. int typeR, regR; Op op; .)
=
SimExpr<out reg,
        out type>
[
    RelOp<out op>
    SimExpr<out regR,
            out typeR>  (.  if (type == typeR) {
                                type = boolean;
                                gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                        .)
]                       (.  gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,        // load Primary into register
        out int type>       (.  int n; Obj obj; string name;
                                int dims = 0; int colReg = 7, indexReg = 8; // Array-specific variables.

                                type = undef;
                                reg = gen.GetRegister();
                            .)
=
(
    Ident<out name>             (.  obj = tab.Find(name); .)
    (
        (                       // Accessing member variable of a new type
            '.'
            Ident<out name>     (.  if (obj.type != new_type_instance)
                                        SemErr("new type instance expected.");

                                    Obj member = tab.FindMember(obj, name);
                                    if (member == null)
                                        SemErr("instance member " + name + " does not exist.");

                                    type = member.type;

                                    if (member.level == 0)
                                        gen.LoadGlobal(reg, member.adr, name);
                                    else
                                        gen.LoadLocal(reg, tab.curLevel-member.level, member.adr, name);
                                .)
        )
        |
        (                       // Accessing array index
            [
                '['
                Expr<out reg,
                     out type>  (.  dims = 1;
                                    if (type == integer) {
                                        gen.MoveRegister(colReg, reg); // R7 holds column.
                                    }
                                    else SemErr("Integer type expected");
                                .)
                [
                    ','
                    Expr<out reg,
                         out type>  (.  dims = 2;
                                        if (type == integer) {
                                            // index = row * no_cols + col
                                            obj = tab.Find(name);
                                            gen.LoadConstant(indexReg, obj.size1); // index = no_cols;
                                            gen.MulOp(Op.MUL, indexReg, reg);      // index = index * row;
                                            gen.AddOp(Op.ADD, indexReg, colReg);   // index = index + col;
                                        }
                                        else SemErr("Integer type expected");
                                    .)
                ]
                ']'                 (.  if (dims == 1) {
                                            gen.MoveRegister(indexReg, colReg);
                                        }
                                    .)
            ]
                                    (.  type = obj.type;
                                        // Variables
                                        if (obj.kind == var) {
                                            if (dims == 0) {
                                                if (obj.level == 0)
                                                    gen.LoadGlobal(reg, obj.adr, name);
                                                else
                                                    gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                                            }
                                            else { // if (dims == 1 || dims == 2)
                                                if (obj.level == 0)
                                                    gen.LoadIndexedGlobal(reg, obj.adr, indexReg, name);
                                                else
                                                    gen.LoadIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg, name);
                                            }
                                            if (type == boolean)
                                                gen.ResetZ(reg); // reset Z flag in CPSR
                                        }
                                        // Constants
                                        else if (obj.kind == cons) {
                                            if (obj.type == integer) {
                                                type = integer;
                                                gen.LoadConstant(reg, obj.value);
                                            }
                                            else if (obj.type == boolean) {
                                                type = boolean;
                                                if (obj.value == 1)
                                                    gen.LoadTrue(reg);
                                                else
                                                    gen.LoadFalse(reg);
                                            }
                                        }
                                        else SemErr("variable or constant expected");
                                    .)
        )
    )
    |
    number              (.  type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)
    |
    '-'
    Primary<out reg,
            out type>   (.  if (type == integer)
                                gen.NegateValue(reg);
                            else SemErr("integer type expected");
                        .)
    |
    "true"              (.  type = boolean;
                            gen.LoadTrue(reg);
                        .)
    |
    "false"             (.  type = boolean;
                            gen.LoadFalse(reg);
                        .)
    |
    '('
    Expr<out reg,
         out type>
    ')'
)
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
=
ident                   (.  name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
=
string                  (.  text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                       (.  op = Op.MUL; .)
(
    '*'
    |
    ("div" | "DIV")     (.  op = Op.DIV; .)
    |
    ("mod" | "MOD")     (.  op = Op.MOD; .)
)
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>   (. string procName; .)
=
"void"
Ident<out procName>         (.  tab.NewObj(procName, proc, undef);
                                if (procName == "main") {
                                    if (tab.curLevel == 0)
                                        tab.mainPresent = true;
                                    else
                                        SemErr("main not at lexic level 0");
                                    gen.Label("Main", "Body");
                                }
                                else {
                                    gen.ProcNameComment(procName);
                                    gen.Label(procName, "Body");
                                }
                                tab.OpenScope();
                            .)
'(' ')' '{'
{
    ConstDecl
    |
    VarDecl
    |
    NewTypeDecl
    |
    NewTypeInstance
    |
    Stat
    |
    ProcDecl<progName>
}
'}'                         (.  if (procName == "main") {
                                    gen.StopProgram(progName);
                                    gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                                }
                                else {
                                    gen.Return(procName);
                                    gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                                }
                                tab.CloseScope();
                            .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                       (.  op = Op.EQU; .)
(
    "="
    |
    '<'                 (.  op = Op.LSS; .)
    |
    '>'                 (.  op = Op.GTR; .)
    |
    "!="                (.  op = Op.NEQ; .)
    |
    "<="                (.  op = Op.LEQ; .)
    |
    ">="                (.  op = Op.GEQ; .)
)
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,    //load value of SimExpr into register
        out int type>   (.  int typeR, regR; Op op; .)
=
Term<out reg,
     out type>
{
    AddOp<out op>
    Term<out regR,
         out typeR>     (.  if (type == integer && typeR == integer)
                                gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                        .)
}
.

/*-------------------------------------------------------------------------------------------*/

Stat                    (.  int type; string name; Obj obj; int reg, colReg = 7, indexReg = 8; .)
=
Ident<out name>         (.  obj = tab.Find(name); .)
[
'.'
Ident<out name>         (.  if (obj.type != new_type_instance)
                                SemErr("new type instance expected.");

                            obj = tab.FindMember(obj, name);
                            if (obj == null)
                                SemErr("instance member " + name + " does not exist.");
                        .)
]
[
    '['
    Expr<out reg,
         out type>      (.  int dims = 1;
                            if (type == integer)
                                gen.MoveRegister(colReg, reg); // R7 holds column.
                            else SemErr("Integer type expected");
                        .)
    [
        ','
        Expr<out reg,
             out type>  (.  dims = 2;
                            if (type == integer) {
                                // index = row * no_cols + col
                                gen.LoadConstant(indexReg, obj.size1); // index = no_cols;
                                gen.MulOp(Op.MUL, indexReg, reg);      // index = index * row;
                                gen.AddOp(Op.ADD, indexReg, colReg);   // index = index + col;
                            }
                            else SemErr("Integer type expected");
                        .)
    ]
    ']'                 (.  if (dims == 1)
                                gen.MoveRegister(indexReg, colReg);
                        .)
]
(
    ":="                (.  if (obj.kind == proc)
                                SemErr("cannot assign to procedure");
                        .)
    Expr<out reg,
         out type>      (.  if (type == obj.type) {
                                if (obj.dims == 0) { // Scalar value.
                                    if (obj.level == 0)
                                        gen.StoreGlobal(reg, obj.adr, name);
                                    else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                                }
                                else {  // 1D / 2D array
                                    if (obj.level == 0)
                                        gen.StoreIndexedGlobal(reg, obj.adr, indexReg, name);
                                    else gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg, name);
                                }
                            }
                            else SemErr("incompatible types");
                        .)
    [
        '?'				(.	int l1 = 0, l2;
							if (type == boolean) {
								l1 = gen.NewLabel();
							    gen.BranchFalse(l1);
							}
							else SemErr("boolean type expected");
						.)
        Expr<out reg,
             out type>  (.  l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                        .)
        ':'
        Expr<out reg,
             out type>  (.  gen.Label(l2); .)
    ]
    ';'
    |
    '(' ')' ';'         (.  if (obj.kind == proc)
                                gen.Call(name);
                            else SemErr("object is not a procedure");
                        .)
)
|
"if"                    (.  int l1 = 0, l2; .)
Expr<out reg,
     out type>          (.  if (type == boolean) {
                                l1 = gen.NewLabel();
                                gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                        .)
Stat                    (.  l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                        .)
[
    "else"
    Stat
]                       (.  gen.Label(l2); .)
|
"while"                 (.  int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1);
                            l2 = 0;
                        .)
Expr<out reg,
     out type>          (.  if (type == boolean) {
                                l2 = gen.NewLabel();
                                gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                        .)
Stat                    (.  gen.Branch(l1);
                            gen.Label(l2);
                        .)
|
ForLoop
|
"read"
Ident<out name>
';'                     (.  obj = tab.Find(name);
                            if (obj.type == integer) {
                                gen.ReadInteger();
                                if (obj.level == 0)
                                    gen.StoreGlobal(0, obj.adr, name);
                                else
                                    gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                        .)

|
"write"                 (.  string text; .)
(
    Expr<out reg,
         out type>      (.  switch (type) {
                                case integer:
                                    gen.WriteInteger(reg, false);
                                    break;
                                case boolean:
                                    gen.WriteBoolean(false);
                                    break;
                            }
                        .)
    |
    String<out text>    (.  gen.WriteString(text); .)
)
';'
|
"writeln"     // note - for strings use write with \n in text
Expr<out reg,
     out type>          (.  switch (type) {
                                case integer:
                                    gen.WriteInteger(reg, true);
                                    break;
                                case boolean:
                                    gen.WriteBoolean(true);
                                    break;
                            }
                        .)
';'
|
'{'                     (.  tab.OpenSubScope(); .)
{ ConstDecl | VarDecl | NewTypeDecl | NewTypeInstance | Stat }
'}'                     (.  tab.CloseSubScope(); .)
|
Switch
.

/*-------------------------------------------------------------------------------------------*/

Tastier                 (.  string progName; .)
=
"program"
Ident<out progName>     (.  tab.OpenScope(); .)
'{'
{ ConstDecl | VarDecl | NewTypeDecl | NewTypeInstance } // Globals
{ ProcDecl<progName> }
'}'                     (.  tab.CloseScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,       // load value of Term into register
     out int type>      (.  int typeR, regR; Op op; .)
=
Primary<out reg,
        out type>
{
    MulOp<out op>
    Primary<out regR,
            out typeR>  (.  if (type == integer && typeR == integer)
                                gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                        .)
}
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                       (.  type = undef;   .)
(
    "int"               (.  type = integer; .)
    |
    "bool"              (.  type = boolean; .)
)
.

/*-------------------------------------------------------------------------------------------*/
/**
 * Declare new variables of type integer or boolean. Can be arrays.
 *
 * EXAMPLE:
 *    int x;
 *    bool a, b;
 *    int arr[5][4];
 */
VarDecl                         (.  string name; int type;
                                    int dims, size1, size2;   // Array-specific variables.
                                .)
=
Type<out type>
Ident<out name>                 (.  Obj obj = tab.NewObj(name, var, type); .)
[
    ArrayDecl<out dims,
              out size1,
              out size2>        (.  tab.CreateArray(obj, dims, size1, size2); .)
]
{
    ','
    Ident<out name>             (.  obj = tab.NewObj(name, var, type); .)
    [
        ArrayDecl<out dims,
                  out size1,
                  out size2>    (.  tab.CreateArray(obj, dims, size1, size2); .)
    ]
}
';'
.

/*-------------------------------------------------------------------------------------------*/
/**
 * Declare a constant integer or boolean.
 *
 * EXAMPLE:
 *    const x = 5;
 *    const y = true;
 */
ConstDecl               (.  string name; int type = undef, value = 0; .)
=
"const"
Ident<out name>
'='
(
    (                   // INTEGER TYPE
                        (.  int sign = +1; .)
        [
            '-'         (.  sign = -1; .)
        ]
        number          (.  value = sign * Convert.ToInt32(t.val);
                            type = integer;
                        .)
    )
    |                   // BOOLEAN TYPE
    "true"              (.  value = 1; // 1 = true
                            type = boolean;
                        .)
    |
    "false"             (.  value = 0; // 0 = false
                            type = boolean;
                        .)
)                       (.  tab.NewConst(name, type, value); .) // Create constant
';'
.

/*-------------------------------------------------------------------------------------------*/
/**
 * Determine the dimensions of an array.
 *
 * [10]   => dims = 1, size1 = 5, size2 = 0
 * [5, 2] => dims = 2, size1 = 5, size2 = 2
 */
ArrayDecl<out int dims,
          out int size1,
          out int size2>    (.  String name; Obj obj; .)
=
'['                         // 1D ARRAY SO FAR
                            (.  size1 = 0; size2 = 0; .)
(
    number                  (.  size1 = Convert.ToInt32(t.val); .)
    |
    Ident<out name>         (.  obj = tab.Find(name); // Get constant from symbol table.
                                if (obj.type == integer && obj.kind == cons)
                                    size1 = obj.value;
                                else SemErr("Integer constant expected");
                            .)
)                           (.  dims = 1; .)
[
    ','                     // 2D ARRAY
    (
        number              (.  size2 = Convert.ToInt32(t.val); .)
        |
        Ident<out name>     (.  obj = tab.Find(name); // Get constant from symbol table.
                                if (obj.type == integer && obj.kind == cons)
                                    size2 = obj.value;
                                else SemErr("Integer type expected");
                            .)
    )                       (. dims = 2; .)
]
']'
.

/*-------------------------------------------------------------------------------------------*/
/**
 * Create a switch / case statement.
 *
 * EXAMPLE:
 *    int x;
 *    x := 5;
 *
 *    switch x {
 *       case 1:
 *          write "1\n";
 *          break;
 *       case 2:
 *          write "2\n";
 *          write "falling through\n";
 *       case 3:
 *          write "3\n";
 *          break;
 *       default:
 *          write "default\n";
 *    }
 */
Switch                  (.  int reg, type;
                            int endLabel  = gen.NewLabel(); // End of switch statement. (For break;)
                            int nextCmp   = gen.NewLabel(); // Next case to be checked. (For failed comparison)
                            int nextStats = gen.NewLabel(); // Next set of statements.  (For fallthrough)
                        .)
=
"switch"                (.  Console.WriteLine("; Start of switch statement."); .)
Expr<out reg,
     out type>          (.  int switchType = type;
                            int switchValue = gen.GetRegister()+1;  // R6
                            gen.MoveRegister(switchValue, reg); // Store value to check for each case
                            gen.ClearRegisters();
                        .)
'{'
{
    "case"              (.  gen.Label(nextCmp); .)
    Expr<out reg,
         out type>      (.  if (type != switchType)
                                SemErr("Type mismatch");

                            // Branch to next case if false
                            gen.RelOp(Op.EQU, reg, switchValue);
                            nextCmp = gen.NewLabel();
                            gen.BranchFalse(nextCmp);
                        .)
    ':'                 (.  gen.Label(nextStats); .)
    { Stat }
    [
        "break" ';'     (.  gen.Branch(endLabel); .)
    ]
                        (.  nextStats = gen.NewLabel();
                            gen.Branch(nextStats);
                        .)
}
                        (.  gen.Label(nextCmp); // If no more cases, branch to optional "default:"
                            gen.Label(nextStats);
                        .)
[   // Optional default case
    "default" ':'
    { Stat }
]
'}'                     (.  gen.Label(endLabel);
                            Console.WriteLine("; End of switch statement.");
                        .)
.

/*-------------------------------------------------------------------------------------------*/
/**
 * Create a for loop.
 *
 * EXAMPLE:                       * C SYNTAX:
 *    int i;                      *    int i;
 *    for 0 <= i < 10 step 2 {    *    for (i = 0; i < 10; i+=2) {
 *       writeln i;               *       printf("%d\n", i);
 *    }                           *    }
 *                                *
 */

ForLoop                 (.  bool increasing = true; // true = increment counter, false = decrement counter.
                            int num1 = 0, num2 = 0; // num1 <= x <= num2
                            int step = 1; // Increment by 1 by default
                            String name;  // Counter ident
                            Obj obj;
                            int reg1, reg2; // reg storing num1 & num2
                        .)
=
"for"                   (.  Console.WriteLine("; For loop declaration."); .)
number                  (.  num1 += Convert.ToInt32(t.val); .)
(
    (                   (.  increasing = true; .) // Increment counter by step.
        '<'             (.  num1++; .)
        |
        "<="
    )
    |
    (                   (.  increasing = false; .) // Decrement counter by step.
        '>'             (.  num1--; .)
        |
        ">="
    )
)
Ident<out name>         (.  // Set counter to num1
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                                reg1 = gen.GetRegister();
                                gen.LoadConstant(reg1, num1);

                                if (obj.level == 0)
                                    gen.StoreGlobal(reg1, obj.adr, name);
                                else
                                    gen.StoreLocal(reg1, tab.curLevel-obj.level, obj.adr, name);

                                gen.ClearRegisters();
                            }
                            else SemErr("integer type expected");
                        .)
(
    (                   (.  if (!increasing)
                                SemErr("Conflicting operators. > or >= expected after identifier.");
                        .)
        '<'             (.  num2--; .)
        |
        "<="
    )
    |
    (                   (.  if (increasing)
                                SemErr("Conflicting operators. < or <= expected after identifier.");
                        .)
        '>'             (.  num2++; .)
        |
        ">="
    )
)
number                  (.  num2 += Convert.ToInt32(t.val);

                            Console.WriteLine("; Start of for loop.");
                            int startLabel = gen.NewLabel();
                            gen.Label(startLabel);

                            reg1 = gen.GetRegister(); // Store counter
                            if (obj.level == 0)
                                gen.LoadGlobal(reg1, obj.adr, name);
                            else
                                gen.LoadLocal(reg1, tab.curLevel-obj.level, obj.adr, name);

                            reg2 = gen.GetRegister(); // Store num2
                            gen.LoadConstant(reg2, num2);

                            int endLabel = gen.NewLabel();
                            // Branch if counter passes num2
                            if (increasing)
                                gen.RelOp(Op.GTR, reg1, reg2);
                            else
                                gen.RelOp(Op.LSS, reg1, reg2);
                            gen.BranchTrue(endLabel);
                            gen.ClearRegisters();

                            Console.WriteLine("; Statements:");
                        .)
[
    "step"
    number              (.  step = Convert.ToInt32(t.val); .)
]
'{'
{ Stat }
'}'                     (.  Console.WriteLine("; Update counter.");

                            // Load counter into reg1
                            reg1 = gen.GetRegister();
                            if (obj.level == 0)
                                gen.LoadGlobal(reg1, obj.adr, name);
                            else
                                gen.LoadLocal(reg1, tab.curLevel-obj.level, obj.adr, name);

                            // Load step into reg
                            int temp = gen.GetRegister();
                            gen.LoadConstant(temp, step);

                            // Add step to counter
                            if (increasing)
                                gen.AddOp(Op.ADD, reg1, temp);
                            else
                                gen.AddOp(Op.SUB, reg1, temp);

                            // Store reg back into counter
                            if (obj.level == 0)
                                gen.StoreGlobal(reg1, obj.adr, name);
                            else
                                gen.StoreLocal(reg1, tab.curLevel-obj.level, obj.adr, name);

                            gen.ClearRegisters();

                            // Branch to start
                            gen.Branch(startLabel);
                            Console.WriteLine("; End of for loop.");
                            gen.Label(endLabel);
                        .)
.

/*-------------------------------------------------------------------------------------------*/
/**
 * Create a new user-defined data type.
 *
 * EXAMPLE:
 *    type Person {
 *       int age, height;
 *       bool male;
 *    }
 */
NewTypeDecl
=
"type"                              (.  string name, var_name; int type; .)
Ident<out name>                     (.  Obj type_obj = tab.NewObj(name, var, new_type); .) // New data type.
'{'
{
    Type<out type>                  // Define member variables of new data type.
    Ident<out var_name>             (.  tab.NewMemberObj(type_obj, var_name, var, type); .)
    {
        ','
        Ident<out var_name>         (.  tab.NewMemberObj(type_obj, var_name, var, type); .)
    }
    ';'
}
'}'
.

/*-------------------------------------------------------------------------------------------*/
/**
 * Create a new instance of a user-defined data type.
 *
 * EXAMPLE:
 *    type Person {
 *       int age, height;
 *       bool male;
 *    }
 *
 *    new Person stephen, david, brian;
 */
NewTypeInstance         (.  string new_type, instance; .)
=
"new"
Ident<out new_type>     // User-defined data type, defined prior to now.
Ident<out instance>     (.  tab.NewInstance(new_type, instance); .)
{
    ','
    Ident<out instance> (.  tab.NewInstance(new_type, instance); .)
}
';'
.

/*-------------------------------------------------------------------------------------------*/

END Tastier.
